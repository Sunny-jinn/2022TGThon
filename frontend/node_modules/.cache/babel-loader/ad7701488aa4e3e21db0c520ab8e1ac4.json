{"ast":null,"code":"import { keyName, base } from 'w3c-keyname';\nimport { Plugin } from 'prosemirror-state';\nconst mac = typeof navigator != \"undefined\" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false;\n\nfunction normalizeKeyName(name) {\n  let parts = name.split(/-(?!$)/),\n      result = parts[parts.length - 1];\n  if (result == \"Space\") result = \" \";\n  let alt, ctrl, shift, meta;\n\n  for (let i = 0; i < parts.length - 1; i++) {\n    let mod = parts[i];\n    if (/^(cmd|meta|m)$/i.test(mod)) meta = true;else if (/^a(lt)?$/i.test(mod)) alt = true;else if (/^(c|ctrl|control)$/i.test(mod)) ctrl = true;else if (/^s(hift)?$/i.test(mod)) shift = true;else if (/^mod$/i.test(mod)) {\n      if (mac) meta = true;else ctrl = true;\n    } else throw new Error(\"Unrecognized modifier name: \" + mod);\n  }\n\n  if (alt) result = \"Alt-\" + result;\n  if (ctrl) result = \"Ctrl-\" + result;\n  if (meta) result = \"Meta-\" + result;\n  if (shift) result = \"Shift-\" + result;\n  return result;\n}\n\nfunction normalize(map) {\n  let copy = Object.create(null);\n\n  for (let prop in map) copy[normalizeKeyName(prop)] = map[prop];\n\n  return copy;\n}\n\nfunction modifiers(name, event, shift) {\n  if (event.altKey) name = \"Alt-\" + name;\n  if (event.ctrlKey) name = \"Ctrl-\" + name;\n  if (event.metaKey) name = \"Meta-\" + name;\n  if (shift !== false && event.shiftKey) name = \"Shift-\" + name;\n  return name;\n}\n/**\nCreate a keymap plugin for the given set of bindings.\n\nBindings should map key names to [command](https://prosemirror.net/docs/ref/#commands)-style\nfunctions, which will be called with `(EditorState, dispatch,\nEditorView)` arguments, and should return true when they've handled\nthe key. Note that the view argument isn't part of the command\nprotocol, but can be used as an escape hatch if a binding needs to\ndirectly interact with the UI.\n\nKey names may be strings like `\"Shift-Ctrl-Enter\"`—a key\nidentifier prefixed with zero or more modifiers. Key identifiers\nare based on the strings that can appear in\n[`KeyEvent.key`](https:developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key).\nUse lowercase letters to refer to letter keys (or uppercase letters\nif you want shift to be held). You may use `\"Space\"` as an alias\nfor the `\" \"` name.\n\nModifiers can be given in any order. `Shift-` (or `s-`), `Alt-` (or\n`a-`), `Ctrl-` (or `c-` or `Control-`) and `Cmd-` (or `m-` or\n`Meta-`) are recognized. For characters that are created by holding\nshift, the `Shift-` prefix is implied, and should not be added\nexplicitly.\n\nYou can use `Mod-` as a shorthand for `Cmd-` on Mac and `Ctrl-` on\nother platforms.\n\nYou can add multiple keymap plugins to an editor. The order in\nwhich they appear determines their precedence (the ones early in\nthe array get to dispatch first).\n*/\n\n\nfunction keymap(bindings) {\n  return new Plugin({\n    props: {\n      handleKeyDown: keydownHandler(bindings)\n    }\n  });\n}\n/**\nGiven a set of bindings (using the same format as\n[`keymap`](https://prosemirror.net/docs/ref/#keymap.keymap)), return a [keydown\nhandler](https://prosemirror.net/docs/ref/#view.EditorProps.handleKeyDown) that handles them.\n*/\n\n\nfunction keydownHandler(bindings) {\n  let map = normalize(bindings);\n  return function (view, event) {\n    let name = keyName(event),\n        isChar = name.length == 1 && name != \" \",\n        baseName;\n    let direct = map[modifiers(name, event, !isChar)];\n    if (direct && direct(view.state, view.dispatch, view)) return true;\n\n    if (isChar && (event.shiftKey || event.altKey || event.metaKey || name.charCodeAt(0) > 127) && (baseName = base[event.keyCode]) && baseName != name) {\n      // Try falling back to the keyCode when there's a modifier\n      // active or the character produced isn't ASCII, and our table\n      // produces a different name from the the keyCode. See #668,\n      // #1060\n      let fromCode = map[modifiers(baseName, event, true)];\n      if (fromCode && fromCode(view.state, view.dispatch, view)) return true;\n    } else if (isChar && event.shiftKey) {\n      // Otherwise, if shift is active, also try the binding with the\n      // Shift- prefix enabled. See #997\n      let withShift = map[modifiers(name, event, true)];\n      if (withShift && withShift(view.state, view.dispatch, view)) return true;\n    }\n\n    return false;\n  };\n}\n\nexport { keydownHandler, keymap };","map":{"version":3,"names":["keyName","base","Plugin","mac","navigator","test","platform","normalizeKeyName","name","parts","split","result","length","alt","ctrl","shift","meta","i","mod","Error","normalize","map","copy","Object","create","prop","modifiers","event","altKey","ctrlKey","metaKey","shiftKey","keymap","bindings","props","handleKeyDown","keydownHandler","view","isChar","baseName","direct","state","dispatch","charCodeAt","keyCode","fromCode","withShift"],"sources":["/Users/sunny/Desktop/Sunnyjin/22tgthon/frontend/node_modules/prosemirror-keymap/dist/index.js"],"sourcesContent":["import { keyName, base } from 'w3c-keyname';\nimport { Plugin } from 'prosemirror-state';\n\nconst mac = typeof navigator != \"undefined\" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false;\nfunction normalizeKeyName(name) {\n    let parts = name.split(/-(?!$)/), result = parts[parts.length - 1];\n    if (result == \"Space\")\n        result = \" \";\n    let alt, ctrl, shift, meta;\n    for (let i = 0; i < parts.length - 1; i++) {\n        let mod = parts[i];\n        if (/^(cmd|meta|m)$/i.test(mod))\n            meta = true;\n        else if (/^a(lt)?$/i.test(mod))\n            alt = true;\n        else if (/^(c|ctrl|control)$/i.test(mod))\n            ctrl = true;\n        else if (/^s(hift)?$/i.test(mod))\n            shift = true;\n        else if (/^mod$/i.test(mod)) {\n            if (mac)\n                meta = true;\n            else\n                ctrl = true;\n        }\n        else\n            throw new Error(\"Unrecognized modifier name: \" + mod);\n    }\n    if (alt)\n        result = \"Alt-\" + result;\n    if (ctrl)\n        result = \"Ctrl-\" + result;\n    if (meta)\n        result = \"Meta-\" + result;\n    if (shift)\n        result = \"Shift-\" + result;\n    return result;\n}\nfunction normalize(map) {\n    let copy = Object.create(null);\n    for (let prop in map)\n        copy[normalizeKeyName(prop)] = map[prop];\n    return copy;\n}\nfunction modifiers(name, event, shift) {\n    if (event.altKey)\n        name = \"Alt-\" + name;\n    if (event.ctrlKey)\n        name = \"Ctrl-\" + name;\n    if (event.metaKey)\n        name = \"Meta-\" + name;\n    if (shift !== false && event.shiftKey)\n        name = \"Shift-\" + name;\n    return name;\n}\n/**\nCreate a keymap plugin for the given set of bindings.\n\nBindings should map key names to [command](https://prosemirror.net/docs/ref/#commands)-style\nfunctions, which will be called with `(EditorState, dispatch,\nEditorView)` arguments, and should return true when they've handled\nthe key. Note that the view argument isn't part of the command\nprotocol, but can be used as an escape hatch if a binding needs to\ndirectly interact with the UI.\n\nKey names may be strings like `\"Shift-Ctrl-Enter\"`—a key\nidentifier prefixed with zero or more modifiers. Key identifiers\nare based on the strings that can appear in\n[`KeyEvent.key`](https:developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key).\nUse lowercase letters to refer to letter keys (or uppercase letters\nif you want shift to be held). You may use `\"Space\"` as an alias\nfor the `\" \"` name.\n\nModifiers can be given in any order. `Shift-` (or `s-`), `Alt-` (or\n`a-`), `Ctrl-` (or `c-` or `Control-`) and `Cmd-` (or `m-` or\n`Meta-`) are recognized. For characters that are created by holding\nshift, the `Shift-` prefix is implied, and should not be added\nexplicitly.\n\nYou can use `Mod-` as a shorthand for `Cmd-` on Mac and `Ctrl-` on\nother platforms.\n\nYou can add multiple keymap plugins to an editor. The order in\nwhich they appear determines their precedence (the ones early in\nthe array get to dispatch first).\n*/\nfunction keymap(bindings) {\n    return new Plugin({ props: { handleKeyDown: keydownHandler(bindings) } });\n}\n/**\nGiven a set of bindings (using the same format as\n[`keymap`](https://prosemirror.net/docs/ref/#keymap.keymap)), return a [keydown\nhandler](https://prosemirror.net/docs/ref/#view.EditorProps.handleKeyDown) that handles them.\n*/\nfunction keydownHandler(bindings) {\n    let map = normalize(bindings);\n    return function (view, event) {\n        let name = keyName(event), isChar = name.length == 1 && name != \" \", baseName;\n        let direct = map[modifiers(name, event, !isChar)];\n        if (direct && direct(view.state, view.dispatch, view))\n            return true;\n        if (isChar && (event.shiftKey || event.altKey || event.metaKey || name.charCodeAt(0) > 127) &&\n            (baseName = base[event.keyCode]) && baseName != name) {\n            // Try falling back to the keyCode when there's a modifier\n            // active or the character produced isn't ASCII, and our table\n            // produces a different name from the the keyCode. See #668,\n            // #1060\n            let fromCode = map[modifiers(baseName, event, true)];\n            if (fromCode && fromCode(view.state, view.dispatch, view))\n                return true;\n        }\n        else if (isChar && event.shiftKey) {\n            // Otherwise, if shift is active, also try the binding with the\n            // Shift- prefix enabled. See #997\n            let withShift = map[modifiers(name, event, true)];\n            if (withShift && withShift(view.state, view.dispatch, view))\n                return true;\n        }\n        return false;\n    };\n}\n\nexport { keydownHandler, keymap };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}