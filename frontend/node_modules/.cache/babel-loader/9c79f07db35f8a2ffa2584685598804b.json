{"ast":null,"code":"import RopeSequence from 'rope-sequence';\nimport { Mapping } from 'prosemirror-transform';\nimport { PluginKey, Plugin } from 'prosemirror-state'; // ProseMirror's history isn't simply a way to roll back to a previous\n// state, because ProseMirror supports applying changes without adding\n// them to the history (for example during collaboration).\n//\n// To this end, each 'Branch' (one for the undo history and one for\n// the redo history) keeps an array of 'Items', which can optionally\n// hold a step (an actual undoable change), and always hold a position\n// map (which is needed to move changes below them to apply to the\n// current document).\n//\n// An item that has both a step and a selection bookmark is the start\n// of an 'event' — a group of changes that will be undone or redone at\n// once. (It stores only the bookmark, since that way we don't have to\n// provide a document until the selection is actually applied, which\n// is useful when compressing.)\n// Used to schedule history compression\n\nvar max_empty_items = 500;\n\nvar Branch = function Branch(items, eventCount) {\n  this.items = items;\n  this.eventCount = eventCount;\n}; // : (EditorState, bool) → ?{transform: Transform, selection: ?SelectionBookmark, remaining: Branch}\n// Pop the latest event off the branch's history and apply it\n// to a document transform.\n\n\nBranch.prototype.popEvent = function popEvent(state, preserveItems) {\n  var this$1 = this;\n\n  if (this.eventCount == 0) {\n    return null;\n  }\n\n  var end = this.items.length;\n\n  for (;; end--) {\n    var next = this.items.get(end - 1);\n\n    if (next.selection) {\n      --end;\n      break;\n    }\n  }\n\n  var remap, mapFrom;\n\n  if (preserveItems) {\n    remap = this.remapping(end, this.items.length);\n    mapFrom = remap.maps.length;\n  }\n\n  var transform = state.tr;\n  var selection, remaining;\n  var addAfter = [],\n      addBefore = [];\n  this.items.forEach(function (item, i) {\n    if (!item.step) {\n      if (!remap) {\n        remap = this$1.remapping(end, i + 1);\n        mapFrom = remap.maps.length;\n      }\n\n      mapFrom--;\n      addBefore.push(item);\n      return;\n    }\n\n    if (remap) {\n      addBefore.push(new Item(item.map));\n      var step = item.step.map(remap.slice(mapFrom)),\n          map;\n\n      if (step && transform.maybeStep(step).doc) {\n        map = transform.mapping.maps[transform.mapping.maps.length - 1];\n        addAfter.push(new Item(map, null, null, addAfter.length + addBefore.length));\n      }\n\n      mapFrom--;\n\n      if (map) {\n        remap.appendMap(map, mapFrom);\n      }\n    } else {\n      transform.maybeStep(item.step);\n    }\n\n    if (item.selection) {\n      selection = remap ? item.selection.map(remap.slice(mapFrom)) : item.selection;\n      remaining = new Branch(this$1.items.slice(0, end).append(addBefore.reverse().concat(addAfter)), this$1.eventCount - 1);\n      return false;\n    }\n  }, this.items.length, 0);\n  return {\n    remaining: remaining,\n    transform: transform,\n    selection: selection\n  };\n}; // : (Transform, ?SelectionBookmark, Object) → Branch\n// Create a new branch with the given transform added.\n\n\nBranch.prototype.addTransform = function addTransform(transform, selection, histOptions, preserveItems) {\n  var newItems = [],\n      eventCount = this.eventCount;\n  var oldItems = this.items,\n      lastItem = !preserveItems && oldItems.length ? oldItems.get(oldItems.length - 1) : null;\n\n  for (var i = 0; i < transform.steps.length; i++) {\n    var step = transform.steps[i].invert(transform.docs[i]);\n    var item = new Item(transform.mapping.maps[i], step, selection),\n        merged = void 0;\n\n    if (merged = lastItem && lastItem.merge(item)) {\n      item = merged;\n\n      if (i) {\n        newItems.pop();\n      } else {\n        oldItems = oldItems.slice(0, oldItems.length - 1);\n      }\n    }\n\n    newItems.push(item);\n\n    if (selection) {\n      eventCount++;\n      selection = null;\n    }\n\n    if (!preserveItems) {\n      lastItem = item;\n    }\n  }\n\n  var overflow = eventCount - histOptions.depth;\n\n  if (overflow > DEPTH_OVERFLOW) {\n    oldItems = cutOffEvents(oldItems, overflow);\n    eventCount -= overflow;\n  }\n\n  return new Branch(oldItems.append(newItems), eventCount);\n};\n\nBranch.prototype.remapping = function remapping(from, to) {\n  var maps = new Mapping();\n  this.items.forEach(function (item, i) {\n    var mirrorPos = item.mirrorOffset != null && i - item.mirrorOffset >= from ? maps.maps.length - item.mirrorOffset : null;\n    maps.appendMap(item.map, mirrorPos);\n  }, from, to);\n  return maps;\n};\n\nBranch.prototype.addMaps = function addMaps(array) {\n  if (this.eventCount == 0) {\n    return this;\n  }\n\n  return new Branch(this.items.append(array.map(function (map) {\n    return new Item(map);\n  })), this.eventCount);\n}; // : (Transform, number)\n// When the collab module receives remote changes, the history has\n// to know about those, so that it can adjust the steps that were\n// rebased on top of the remote changes, and include the position\n// maps for the remote changes in its array of items.\n\n\nBranch.prototype.rebased = function rebased(rebasedTransform, rebasedCount) {\n  if (!this.eventCount) {\n    return this;\n  }\n\n  var rebasedItems = [],\n      start = Math.max(0, this.items.length - rebasedCount);\n  var mapping = rebasedTransform.mapping;\n  var newUntil = rebasedTransform.steps.length;\n  var eventCount = this.eventCount;\n  this.items.forEach(function (item) {\n    if (item.selection) {\n      eventCount--;\n    }\n  }, start);\n  var iRebased = rebasedCount;\n  this.items.forEach(function (item) {\n    var pos = mapping.getMirror(--iRebased);\n\n    if (pos == null) {\n      return;\n    }\n\n    newUntil = Math.min(newUntil, pos);\n    var map = mapping.maps[pos];\n\n    if (item.step) {\n      var step = rebasedTransform.steps[pos].invert(rebasedTransform.docs[pos]);\n      var selection = item.selection && item.selection.map(mapping.slice(iRebased + 1, pos));\n\n      if (selection) {\n        eventCount++;\n      }\n\n      rebasedItems.push(new Item(map, step, selection));\n    } else {\n      rebasedItems.push(new Item(map));\n    }\n  }, start);\n  var newMaps = [];\n\n  for (var i = rebasedCount; i < newUntil; i++) {\n    newMaps.push(new Item(mapping.maps[i]));\n  }\n\n  var items = this.items.slice(0, start).append(newMaps).append(rebasedItems);\n  var branch = new Branch(items, eventCount);\n\n  if (branch.emptyItemCount() > max_empty_items) {\n    branch = branch.compress(this.items.length - rebasedItems.length);\n  }\n\n  return branch;\n};\n\nBranch.prototype.emptyItemCount = function emptyItemCount() {\n  var count = 0;\n  this.items.forEach(function (item) {\n    if (!item.step) {\n      count++;\n    }\n  });\n  return count;\n}; // Compressing a branch means rewriting it to push the air (map-only\n// items) out. During collaboration, these naturally accumulate\n// because each remote change adds one. The `upto` argument is used\n// to ensure that only the items below a given level are compressed,\n// because `rebased` relies on a clean, untouched set of items in\n// order to associate old items with rebased steps.\n\n\nBranch.prototype.compress = function compress(upto) {\n  if (upto === void 0) upto = this.items.length;\n  var remap = this.remapping(0, upto),\n      mapFrom = remap.maps.length;\n  var items = [],\n      events = 0;\n  this.items.forEach(function (item, i) {\n    if (i >= upto) {\n      items.push(item);\n\n      if (item.selection) {\n        events++;\n      }\n    } else if (item.step) {\n      var step = item.step.map(remap.slice(mapFrom)),\n          map = step && step.getMap();\n      mapFrom--;\n\n      if (map) {\n        remap.appendMap(map, mapFrom);\n      }\n\n      if (step) {\n        var selection = item.selection && item.selection.map(remap.slice(mapFrom));\n\n        if (selection) {\n          events++;\n        }\n\n        var newItem = new Item(map.invert(), step, selection),\n            merged,\n            last = items.length - 1;\n\n        if (merged = items.length && items[last].merge(newItem)) {\n          items[last] = merged;\n        } else {\n          items.push(newItem);\n        }\n      }\n    } else if (item.map) {\n      mapFrom--;\n    }\n  }, this.items.length, 0);\n  return new Branch(RopeSequence.from(items.reverse()), events);\n};\n\nBranch.empty = new Branch(RopeSequence.empty, 0);\n\nfunction cutOffEvents(items, n) {\n  var cutPoint;\n  items.forEach(function (item, i) {\n    if (item.selection && n-- == 0) {\n      cutPoint = i;\n      return false;\n    }\n  });\n  return items.slice(cutPoint);\n}\n\nvar Item = function Item(map, step, selection, mirrorOffset) {\n  // The (forward) step map for this item.\n  this.map = map; // The inverted step\n\n  this.step = step; // If this is non-null, this item is the start of a group, and\n  // this selection is the starting selection for the group (the one\n  // that was active before the first step was applied)\n\n  this.selection = selection; // If this item is the inverse of a previous mapping on the stack,\n  // this points at the inverse's offset\n\n  this.mirrorOffset = mirrorOffset;\n};\n\nItem.prototype.merge = function merge(other) {\n  if (this.step && other.step && !other.selection) {\n    var step = other.step.merge(this.step);\n\n    if (step) {\n      return new Item(step.getMap().invert(), step, this.selection);\n    }\n  }\n}; // The value of the state field that tracks undo/redo history for that\n// state. Will be stored in the plugin state when the history plugin\n// is active.\n\n\nvar HistoryState = function HistoryState(done, undone, prevRanges, prevTime) {\n  this.done = done;\n  this.undone = undone;\n  this.prevRanges = prevRanges;\n  this.prevTime = prevTime;\n};\n\nvar DEPTH_OVERFLOW = 20; // : (HistoryState, EditorState, Transaction, Object)\n// Record a transformation in undo history.\n\nfunction applyTransaction(history, state, tr, options) {\n  var historyTr = tr.getMeta(historyKey),\n      rebased;\n\n  if (historyTr) {\n    return historyTr.historyState;\n  }\n\n  if (tr.getMeta(closeHistoryKey)) {\n    history = new HistoryState(history.done, history.undone, null, 0);\n  }\n\n  var appended = tr.getMeta(\"appendedTransaction\");\n\n  if (tr.steps.length == 0) {\n    return history;\n  } else if (appended && appended.getMeta(historyKey)) {\n    if (appended.getMeta(historyKey).redo) {\n      return new HistoryState(history.done.addTransform(tr, null, options, mustPreserveItems(state)), history.undone, rangesFor(tr.mapping.maps[tr.steps.length - 1]), history.prevTime);\n    } else {\n      return new HistoryState(history.done, history.undone.addTransform(tr, null, options, mustPreserveItems(state)), null, history.prevTime);\n    }\n  } else if (tr.getMeta(\"addToHistory\") !== false && !(appended && appended.getMeta(\"addToHistory\") === false)) {\n    // Group transforms that occur in quick succession into one event.\n    var newGroup = history.prevTime == 0 || !appended && (history.prevTime < (tr.time || 0) - options.newGroupDelay || !isAdjacentTo(tr, history.prevRanges));\n    var prevRanges = appended ? mapRanges(history.prevRanges, tr.mapping) : rangesFor(tr.mapping.maps[tr.steps.length - 1]);\n    return new HistoryState(history.done.addTransform(tr, newGroup ? state.selection.getBookmark() : null, options, mustPreserveItems(state)), Branch.empty, prevRanges, tr.time);\n  } else if (rebased = tr.getMeta(\"rebased\")) {\n    // Used by the collab module to tell the history that some of its\n    // content has been rebased.\n    return new HistoryState(history.done.rebased(tr, rebased), history.undone.rebased(tr, rebased), mapRanges(history.prevRanges, tr.mapping), history.prevTime);\n  } else {\n    return new HistoryState(history.done.addMaps(tr.mapping.maps), history.undone.addMaps(tr.mapping.maps), mapRanges(history.prevRanges, tr.mapping), history.prevTime);\n  }\n}\n\nfunction isAdjacentTo(transform, prevRanges) {\n  if (!prevRanges) {\n    return false;\n  }\n\n  if (!transform.docChanged) {\n    return true;\n  }\n\n  var adjacent = false;\n  transform.mapping.maps[0].forEach(function (start, end) {\n    for (var i = 0; i < prevRanges.length; i += 2) {\n      if (start <= prevRanges[i + 1] && end >= prevRanges[i]) {\n        adjacent = true;\n      }\n    }\n  });\n  return adjacent;\n}\n\nfunction rangesFor(map) {\n  var result = [];\n  map.forEach(function (_from, _to, from, to) {\n    return result.push(from, to);\n  });\n  return result;\n}\n\nfunction mapRanges(ranges, mapping) {\n  if (!ranges) {\n    return null;\n  }\n\n  var result = [];\n\n  for (var i = 0; i < ranges.length; i += 2) {\n    var from = mapping.map(ranges[i], 1),\n        to = mapping.map(ranges[i + 1], -1);\n\n    if (from <= to) {\n      result.push(from, to);\n    }\n  }\n\n  return result;\n} // : (HistoryState, EditorState, (tr: Transaction), bool)\n// Apply the latest event from one branch to the document and shift the event\n// onto the other branch.\n\n\nfunction histTransaction(history, state, dispatch, redo) {\n  var preserveItems = mustPreserveItems(state),\n      histOptions = historyKey.get(state).spec.config;\n  var pop = (redo ? history.undone : history.done).popEvent(state, preserveItems);\n\n  if (!pop) {\n    return;\n  }\n\n  var selection = pop.selection.resolve(pop.transform.doc);\n  var added = (redo ? history.done : history.undone).addTransform(pop.transform, state.selection.getBookmark(), histOptions, preserveItems);\n  var newHist = new HistoryState(redo ? added : pop.remaining, redo ? pop.remaining : added, null, 0);\n  dispatch(pop.transform.setSelection(selection).setMeta(historyKey, {\n    redo: redo,\n    historyState: newHist\n  }).scrollIntoView());\n}\n\nvar cachedPreserveItems = false,\n    cachedPreserveItemsPlugins = null; // Check whether any plugin in the given state has a\n// `historyPreserveItems` property in its spec, in which case we must\n// preserve steps exactly as they came in, so that they can be\n// rebased.\n\nfunction mustPreserveItems(state) {\n  var plugins = state.plugins;\n\n  if (cachedPreserveItemsPlugins != plugins) {\n    cachedPreserveItems = false;\n    cachedPreserveItemsPlugins = plugins;\n\n    for (var i = 0; i < plugins.length; i++) {\n      if (plugins[i].spec.historyPreserveItems) {\n        cachedPreserveItems = true;\n        break;\n      }\n    }\n  }\n\n  return cachedPreserveItems;\n} // :: (Transaction) → Transaction\n// Set a flag on the given transaction that will prevent further steps\n// from being appended to an existing history event (so that they\n// require a separate undo command to undo).\n\n\nfunction closeHistory(tr) {\n  return tr.setMeta(closeHistoryKey, true);\n}\n\nvar historyKey = new PluginKey(\"history\");\nvar closeHistoryKey = new PluginKey(\"closeHistory\"); // :: (?Object) → Plugin\n// Returns a plugin that enables the undo history for an editor. The\n// plugin will track undo and redo stacks, which can be used with the\n// [`undo`](#history.undo) and [`redo`](#history.redo) commands.\n//\n// You can set an `\"addToHistory\"` [metadata\n// property](#state.Transaction.setMeta) of `false` on a transaction\n// to prevent it from being rolled back by undo.\n//\n//   config::-\n//   Supports the following configuration options:\n//\n//     depth:: ?number\n//     The amount of history events that are collected before the\n//     oldest events are discarded. Defaults to 100.\n//\n//     newGroupDelay:: ?number\n//     The delay between changes after which a new group should be\n//     started. Defaults to 500 (milliseconds). Note that when changes\n//     aren't adjacent, a new group is always started.\n\nfunction history(config) {\n  config = {\n    depth: config && config.depth || 100,\n    newGroupDelay: config && config.newGroupDelay || 500\n  };\n  return new Plugin({\n    key: historyKey,\n    state: {\n      init: function init() {\n        return new HistoryState(Branch.empty, Branch.empty, null, 0);\n      },\n      apply: function apply(tr, hist, state) {\n        return applyTransaction(hist, state, tr, config);\n      }\n    },\n    config: config\n  });\n} // :: (EditorState, ?(tr: Transaction)) → bool\n// A command function that undoes the last change, if any.\n\n\nfunction undo(state, dispatch) {\n  var hist = historyKey.getState(state);\n\n  if (!hist || hist.done.eventCount == 0) {\n    return false;\n  }\n\n  if (dispatch) {\n    histTransaction(hist, state, dispatch, false);\n  }\n\n  return true;\n} // :: (EditorState, ?(tr: Transaction)) → bool\n// A command function that redoes the last undone change, if any.\n\n\nfunction redo(state, dispatch) {\n  var hist = historyKey.getState(state);\n\n  if (!hist || hist.undone.eventCount == 0) {\n    return false;\n  }\n\n  if (dispatch) {\n    histTransaction(hist, state, dispatch, true);\n  }\n\n  return true;\n} // :: (EditorState) → number\n// The amount of undoable events available in a given state.\n\n\nfunction undoDepth(state) {\n  var hist = historyKey.getState(state);\n  return hist ? hist.done.eventCount : 0;\n} // :: (EditorState) → number\n// The amount of redoable events available in a given editor state.\n\n\nfunction redoDepth(state) {\n  var hist = historyKey.getState(state);\n  return hist ? hist.undone.eventCount : 0;\n}\n\nexport { HistoryState, closeHistory, history, redo, redoDepth, undo, undoDepth }; //# sourceMappingURL=index.es.js.map","map":null,"metadata":{},"sourceType":"module"}