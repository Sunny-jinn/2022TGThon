{"ast":null,"code":"import { liftTarget, replaceStep, canJoin, joinPoint, canSplit, ReplaceAroundStep, findWrapping } from 'prosemirror-transform';\nimport { Slice, Fragment } from 'prosemirror-model';\nimport { NodeSelection, Selection, AllSelection, TextSelection } from 'prosemirror-state';\n/**\nDelete the selection, if there is one.\n*/\n\nconst deleteSelection = (state, dispatch) => {\n  if (state.selection.empty) return false;\n  if (dispatch) dispatch(state.tr.deleteSelection().scrollIntoView());\n  return true;\n};\n/**\nIf the selection is empty and at the start of a textblock, try to\nreduce the distance between that block and the one before itâ€”if\nthere's a block directly before it that can be joined, join them.\nIf not, try to move the selected block closer to the next one in\nthe document structure by lifting it out of its parent or moving it\ninto a parent of the previous block. Will use the view for accurate\n(bidi-aware) start-of-textblock detection if given.\n*/\n\n\nconst joinBackward = (state, dispatch, view) => {\n  let {\n    $cursor\n  } = state.selection;\n  if (!$cursor || (view ? !view.endOfTextblock(\"backward\", state) : $cursor.parentOffset > 0)) return false;\n  let $cut = findCutBefore($cursor); // If there is no node before this, try to lift\n\n  if (!$cut) {\n    let range = $cursor.blockRange(),\n        target = range && liftTarget(range);\n    if (target == null) return false;\n    if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView());\n    return true;\n  }\n\n  let before = $cut.nodeBefore; // Apply the joining algorithm\n\n  if (!before.type.spec.isolating && deleteBarrier(state, $cut, dispatch)) return true; // If the node below has no content and the node above is\n  // selectable, delete the node below and select the one above.\n\n  if ($cursor.parent.content.size == 0 && (textblockAt(before, \"end\") || NodeSelection.isSelectable(before))) {\n    let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);\n\n    if (delStep && delStep.slice.size < delStep.to - delStep.from) {\n      if (dispatch) {\n        let tr = state.tr.step(delStep);\n        tr.setSelection(textblockAt(before, \"end\") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos, -1)), -1) : NodeSelection.create(tr.doc, $cut.pos - before.nodeSize));\n        dispatch(tr.scrollIntoView());\n      }\n\n      return true;\n    }\n  } // If the node before is an atom, delete it\n\n\n  if (before.isAtom && $cut.depth == $cursor.depth - 1) {\n    if (dispatch) dispatch(state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView());\n    return true;\n  }\n\n  return false;\n};\n\nfunction textblockAt(node, side) {\n  let only = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  for (let scan = node; scan; scan = side == \"start\" ? scan.firstChild : scan.lastChild) {\n    if (scan.isTextblock) return true;\n    if (only && scan.childCount != 1) return false;\n  }\n\n  return false;\n}\n/**\nWhen the selection is empty and at the start of a textblock, select\nthe node before that textblock, if possible. This is intended to be\nbound to keys like backspace, after\n[`joinBackward`](https://prosemirror.net/docs/ref/#commands.joinBackward) or other deleting\ncommands, as a fall-back behavior when the schema doesn't allow\ndeletion at the selected point.\n*/\n\n\nconst selectNodeBackward = (state, dispatch, view) => {\n  let {\n    $head,\n    empty\n  } = state.selection,\n      $cut = $head;\n  if (!empty) return false;\n\n  if ($head.parent.isTextblock) {\n    if (view ? !view.endOfTextblock(\"backward\", state) : $head.parentOffset > 0) return false;\n    $cut = findCutBefore($head);\n  }\n\n  let node = $cut && $cut.nodeBefore;\n  if (!node || !NodeSelection.isSelectable(node)) return false;\n  if (dispatch) dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos - node.nodeSize)).scrollIntoView());\n  return true;\n};\n\nfunction findCutBefore($pos) {\n  if (!$pos.parent.type.spec.isolating) for (let i = $pos.depth - 1; i >= 0; i--) {\n    if ($pos.index(i) > 0) return $pos.doc.resolve($pos.before(i + 1));\n    if ($pos.node(i).type.spec.isolating) break;\n  }\n  return null;\n}\n/**\nIf the selection is empty and the cursor is at the end of a\ntextblock, try to reduce or remove the boundary between that block\nand the one after it, either by joining them or by moving the other\nblock closer to this one in the tree structure. Will use the view\nfor accurate start-of-textblock detection if given.\n*/\n\n\nconst joinForward = (state, dispatch, view) => {\n  let {\n    $cursor\n  } = state.selection;\n  if (!$cursor || (view ? !view.endOfTextblock(\"forward\", state) : $cursor.parentOffset < $cursor.parent.content.size)) return false;\n  let $cut = findCutAfter($cursor); // If there is no node after this, there's nothing to do\n\n  if (!$cut) return false;\n  let after = $cut.nodeAfter; // Try the joining algorithm\n\n  if (deleteBarrier(state, $cut, dispatch)) return true; // If the node above has no content and the node below is\n  // selectable, delete the node above and select the one below.\n\n  if ($cursor.parent.content.size == 0 && (textblockAt(after, \"start\") || NodeSelection.isSelectable(after))) {\n    let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);\n\n    if (delStep && delStep.slice.size < delStep.to - delStep.from) {\n      if (dispatch) {\n        let tr = state.tr.step(delStep);\n        tr.setSelection(textblockAt(after, \"start\") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos)), 1) : NodeSelection.create(tr.doc, tr.mapping.map($cut.pos)));\n        dispatch(tr.scrollIntoView());\n      }\n\n      return true;\n    }\n  } // If the next node is an atom, delete it\n\n\n  if (after.isAtom && $cut.depth == $cursor.depth - 1) {\n    if (dispatch) dispatch(state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView());\n    return true;\n  }\n\n  return false;\n};\n/**\nWhen the selection is empty and at the end of a textblock, select\nthe node coming after that textblock, if possible. This is intended\nto be bound to keys like delete, after\n[`joinForward`](https://prosemirror.net/docs/ref/#commands.joinForward) and similar deleting\ncommands, to provide a fall-back behavior when the schema doesn't\nallow deletion at the selected point.\n*/\n\n\nconst selectNodeForward = (state, dispatch, view) => {\n  let {\n    $head,\n    empty\n  } = state.selection,\n      $cut = $head;\n  if (!empty) return false;\n\n  if ($head.parent.isTextblock) {\n    if (view ? !view.endOfTextblock(\"forward\", state) : $head.parentOffset < $head.parent.content.size) return false;\n    $cut = findCutAfter($head);\n  }\n\n  let node = $cut && $cut.nodeAfter;\n  if (!node || !NodeSelection.isSelectable(node)) return false;\n  if (dispatch) dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos)).scrollIntoView());\n  return true;\n};\n\nfunction findCutAfter($pos) {\n  if (!$pos.parent.type.spec.isolating) for (let i = $pos.depth - 1; i >= 0; i--) {\n    let parent = $pos.node(i);\n    if ($pos.index(i) + 1 < parent.childCount) return $pos.doc.resolve($pos.after(i + 1));\n    if (parent.type.spec.isolating) break;\n  }\n  return null;\n}\n/**\nJoin the selected block or, if there is a text selection, the\nclosest ancestor block of the selection that can be joined, with\nthe sibling above it.\n*/\n\n\nconst joinUp = (state, dispatch) => {\n  let sel = state.selection,\n      nodeSel = sel instanceof NodeSelection,\n      point;\n\n  if (nodeSel) {\n    if (sel.node.isTextblock || !canJoin(state.doc, sel.from)) return false;\n    point = sel.from;\n  } else {\n    point = joinPoint(state.doc, sel.from, -1);\n    if (point == null) return false;\n  }\n\n  if (dispatch) {\n    let tr = state.tr.join(point);\n    if (nodeSel) tr.setSelection(NodeSelection.create(tr.doc, point - state.doc.resolve(point).nodeBefore.nodeSize));\n    dispatch(tr.scrollIntoView());\n  }\n\n  return true;\n};\n/**\nJoin the selected block, or the closest ancestor of the selection\nthat can be joined, with the sibling after it.\n*/\n\n\nconst joinDown = (state, dispatch) => {\n  let sel = state.selection,\n      point;\n\n  if (sel instanceof NodeSelection) {\n    if (sel.node.isTextblock || !canJoin(state.doc, sel.to)) return false;\n    point = sel.to;\n  } else {\n    point = joinPoint(state.doc, sel.to, 1);\n    if (point == null) return false;\n  }\n\n  if (dispatch) dispatch(state.tr.join(point).scrollIntoView());\n  return true;\n};\n/**\nLift the selected block, or the closest ancestor block of the\nselection that can be lifted, out of its parent node.\n*/\n\n\nconst lift = (state, dispatch) => {\n  let {\n    $from,\n    $to\n  } = state.selection;\n  let range = $from.blockRange($to),\n      target = range && liftTarget(range);\n  if (target == null) return false;\n  if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView());\n  return true;\n};\n/**\nIf the selection is in a node whose type has a truthy\n[`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) property in its spec, replace the\nselection with a newline character.\n*/\n\n\nconst newlineInCode = (state, dispatch) => {\n  let {\n    $head,\n    $anchor\n  } = state.selection;\n  if (!$head.parent.type.spec.code || !$head.sameParent($anchor)) return false;\n  if (dispatch) dispatch(state.tr.insertText(\"\\n\").scrollIntoView());\n  return true;\n};\n\nfunction defaultBlockAt(match) {\n  for (let i = 0; i < match.edgeCount; i++) {\n    let {\n      type\n    } = match.edge(i);\n    if (type.isTextblock && !type.hasRequiredAttrs()) return type;\n  }\n\n  return null;\n}\n/**\nWhen the selection is in a node with a truthy\n[`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) property in its spec, create a\ndefault block after the code block, and move the cursor there.\n*/\n\n\nconst exitCode = (state, dispatch) => {\n  let {\n    $head,\n    $anchor\n  } = state.selection;\n  if (!$head.parent.type.spec.code || !$head.sameParent($anchor)) return false;\n  let above = $head.node(-1),\n      after = $head.indexAfter(-1),\n      type = defaultBlockAt(above.contentMatchAt(after));\n  if (!type || !above.canReplaceWith(after, after, type)) return false;\n\n  if (dispatch) {\n    let pos = $head.after(),\n        tr = state.tr.replaceWith(pos, pos, type.createAndFill());\n    tr.setSelection(Selection.near(tr.doc.resolve(pos), 1));\n    dispatch(tr.scrollIntoView());\n  }\n\n  return true;\n};\n/**\nIf a block node is selected, create an empty paragraph before (if\nit is its parent's first child) or after it.\n*/\n\n\nconst createParagraphNear = (state, dispatch) => {\n  let sel = state.selection,\n      {\n    $from,\n    $to\n  } = sel;\n  if (sel instanceof AllSelection || $from.parent.inlineContent || $to.parent.inlineContent) return false;\n  let type = defaultBlockAt($to.parent.contentMatchAt($to.indexAfter()));\n  if (!type || !type.isTextblock) return false;\n\n  if (dispatch) {\n    let side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos;\n    let tr = state.tr.insert(side, type.createAndFill());\n    tr.setSelection(TextSelection.create(tr.doc, side + 1));\n    dispatch(tr.scrollIntoView());\n  }\n\n  return true;\n};\n/**\nIf the cursor is in an empty textblock that can be lifted, lift the\nblock.\n*/\n\n\nconst liftEmptyBlock = (state, dispatch) => {\n  let {\n    $cursor\n  } = state.selection;\n  if (!$cursor || $cursor.parent.content.size) return false;\n\n  if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {\n    let before = $cursor.before();\n\n    if (canSplit(state.doc, before)) {\n      if (dispatch) dispatch(state.tr.split(before).scrollIntoView());\n      return true;\n    }\n  }\n\n  let range = $cursor.blockRange(),\n      target = range && liftTarget(range);\n  if (target == null) return false;\n  if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView());\n  return true;\n};\n/**\nSplit the parent block of the selection. If the selection is a text\nselection, also delete its content.\n*/\n\n\nconst splitBlock = (state, dispatch) => {\n  let {\n    $from,\n    $to\n  } = state.selection;\n\n  if (state.selection instanceof NodeSelection && state.selection.node.isBlock) {\n    if (!$from.parentOffset || !canSplit(state.doc, $from.pos)) return false;\n    if (dispatch) dispatch(state.tr.split($from.pos).scrollIntoView());\n    return true;\n  }\n\n  if (!$from.parent.isBlock) return false;\n\n  if (dispatch) {\n    let atEnd = $to.parentOffset == $to.parent.content.size;\n    let tr = state.tr;\n    if (state.selection instanceof TextSelection || state.selection instanceof AllSelection) tr.deleteSelection();\n    let deflt = $from.depth == 0 ? null : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));\n    let types = atEnd && deflt ? [{\n      type: deflt\n    }] : undefined;\n    let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types);\n\n    if (!types && !can && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{\n      type: deflt\n    }] : undefined)) {\n      if (deflt) types = [{\n        type: deflt\n      }];\n      can = true;\n    }\n\n    if (can) {\n      tr.split(tr.mapping.map($from.pos), 1, types);\n\n      if (!atEnd && !$from.parentOffset && $from.parent.type != deflt) {\n        let first = tr.mapping.map($from.before()),\n            $first = tr.doc.resolve(first);\n        if (deflt && $from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);\n      }\n    }\n\n    dispatch(tr.scrollIntoView());\n  }\n\n  return true;\n};\n/**\nActs like [`splitBlock`](https://prosemirror.net/docs/ref/#commands.splitBlock), but without\nresetting the set of active marks at the cursor.\n*/\n\n\nconst splitBlockKeepMarks = (state, dispatch) => {\n  return splitBlock(state, dispatch && (tr => {\n    let marks = state.storedMarks || state.selection.$to.parentOffset && state.selection.$from.marks();\n    if (marks) tr.ensureMarks(marks);\n    dispatch(tr);\n  }));\n};\n/**\nMove the selection to the node wrapping the current selection, if\nany. (Will not select the document node.)\n*/\n\n\nconst selectParentNode = (state, dispatch) => {\n  let {\n    $from,\n    to\n  } = state.selection,\n      pos;\n  let same = $from.sharedDepth(to);\n  if (same == 0) return false;\n  pos = $from.before(same);\n  if (dispatch) dispatch(state.tr.setSelection(NodeSelection.create(state.doc, pos)));\n  return true;\n};\n/**\nSelect the whole document.\n*/\n\n\nconst selectAll = (state, dispatch) => {\n  if (dispatch) dispatch(state.tr.setSelection(new AllSelection(state.doc)));\n  return true;\n};\n\nfunction joinMaybeClear(state, $pos, dispatch) {\n  let before = $pos.nodeBefore,\n      after = $pos.nodeAfter,\n      index = $pos.index();\n  if (!before || !after || !before.type.compatibleContent(after.type)) return false;\n\n  if (!before.content.size && $pos.parent.canReplace(index - 1, index)) {\n    if (dispatch) dispatch(state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView());\n    return true;\n  }\n\n  if (!$pos.parent.canReplace(index, index + 1) || !(after.isTextblock || canJoin(state.doc, $pos.pos))) return false;\n  if (dispatch) dispatch(state.tr.clearIncompatible($pos.pos, before.type, before.contentMatchAt(before.childCount)).join($pos.pos).scrollIntoView());\n  return true;\n}\n\nfunction deleteBarrier(state, $cut, dispatch) {\n  let before = $cut.nodeBefore,\n      after = $cut.nodeAfter,\n      conn,\n      match;\n  if (before.type.spec.isolating || after.type.spec.isolating) return false;\n  if (joinMaybeClear(state, $cut, dispatch)) return true;\n  let canDelAfter = $cut.parent.canReplace($cut.index(), $cut.index() + 1);\n\n  if (canDelAfter && (conn = (match = before.contentMatchAt(before.childCount)).findWrapping(after.type)) && match.matchType(conn[0] || after.type).validEnd) {\n    if (dispatch) {\n      let end = $cut.pos + after.nodeSize,\n          wrap = Fragment.empty;\n\n      for (let i = conn.length - 1; i >= 0; i--) wrap = Fragment.from(conn[i].create(null, wrap));\n\n      wrap = Fragment.from(before.copy(wrap));\n      let tr = state.tr.step(new ReplaceAroundStep($cut.pos - 1, end, $cut.pos, end, new Slice(wrap, 1, 0), conn.length, true));\n      let joinAt = end + 2 * conn.length;\n      if (canJoin(tr.doc, joinAt)) tr.join(joinAt);\n      dispatch(tr.scrollIntoView());\n    }\n\n    return true;\n  }\n\n  let selAfter = Selection.findFrom($cut, 1);\n  let range = selAfter && selAfter.$from.blockRange(selAfter.$to),\n      target = range && liftTarget(range);\n\n  if (target != null && target >= $cut.depth) {\n    if (dispatch) dispatch(state.tr.lift(range, target).scrollIntoView());\n    return true;\n  }\n\n  if (canDelAfter && textblockAt(after, \"start\", true) && textblockAt(before, \"end\")) {\n    let at = before,\n        wrap = [];\n\n    for (;;) {\n      wrap.push(at);\n      if (at.isTextblock) break;\n      at = at.lastChild;\n    }\n\n    let afterText = after,\n        afterDepth = 1;\n\n    for (; !afterText.isTextblock; afterText = afterText.firstChild) afterDepth++;\n\n    if (at.canReplace(at.childCount, at.childCount, afterText.content)) {\n      if (dispatch) {\n        let end = Fragment.empty;\n\n        for (let i = wrap.length - 1; i >= 0; i--) end = Fragment.from(wrap[i].copy(end));\n\n        let tr = state.tr.step(new ReplaceAroundStep($cut.pos - wrap.length, $cut.pos + after.nodeSize, $cut.pos + afterDepth, $cut.pos + after.nodeSize - afterDepth, new Slice(end, wrap.length, 0), 0, true));\n        dispatch(tr.scrollIntoView());\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction selectTextblockSide(side) {\n  return function (state, dispatch) {\n    let sel = state.selection,\n        $pos = side < 0 ? sel.$from : sel.$to;\n    let depth = $pos.depth;\n\n    while ($pos.node(depth).isInline) {\n      if (!depth) return false;\n      depth--;\n    }\n\n    if (!$pos.node(depth).isTextblock) return false;\n    if (dispatch) dispatch(state.tr.setSelection(TextSelection.create(state.doc, side < 0 ? $pos.start(depth) : $pos.end(depth))));\n    return true;\n  };\n}\n/**\nMoves the cursor to the start of current text block.\n*/\n\n\nconst selectTextblockStart = selectTextblockSide(-1);\n/**\nMoves the cursor to the end of current text block.\n*/\n\nconst selectTextblockEnd = selectTextblockSide(1); // Parameterized commands\n\n/**\nWrap the selection in a node of the given type with the given\nattributes.\n*/\n\nfunction wrapIn(nodeType) {\n  let attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return function (state, dispatch) {\n    let {\n      $from,\n      $to\n    } = state.selection;\n    let range = $from.blockRange($to),\n        wrapping = range && findWrapping(range, nodeType, attrs);\n    if (!wrapping) return false;\n    if (dispatch) dispatch(state.tr.wrap(range, wrapping).scrollIntoView());\n    return true;\n  };\n}\n/**\nReturns a command that tries to set the selected textblocks to the\ngiven node type with the given attributes.\n*/\n\n\nfunction setBlockType(nodeType) {\n  let attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return function (state, dispatch) {\n    let {\n      from,\n      to\n    } = state.selection;\n    let applicable = false;\n    state.doc.nodesBetween(from, to, (node, pos) => {\n      if (applicable) return false;\n      if (!node.isTextblock || node.hasMarkup(nodeType, attrs)) return;\n\n      if (node.type == nodeType) {\n        applicable = true;\n      } else {\n        let $pos = state.doc.resolve(pos),\n            index = $pos.index();\n        applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType);\n      }\n    });\n    if (!applicable) return false;\n    if (dispatch) dispatch(state.tr.setBlockType(from, to, nodeType, attrs).scrollIntoView());\n    return true;\n  };\n}\n\nfunction markApplies(doc, ranges, type) {\n  for (let i = 0; i < ranges.length; i++) {\n    let {\n      $from,\n      $to\n    } = ranges[i];\n    let can = $from.depth == 0 ? doc.type.allowsMarkType(type) : false;\n    doc.nodesBetween($from.pos, $to.pos, node => {\n      if (can) return false;\n      can = node.inlineContent && node.type.allowsMarkType(type);\n    });\n    if (can) return true;\n  }\n\n  return false;\n}\n/**\nCreate a command function that toggles the given mark with the\ngiven attributes. Will return `false` when the current selection\ndoesn't support that mark. This will remove the mark if any marks\nof that type exist in the selection, or add it otherwise. If the\nselection is empty, this applies to the [stored\nmarks](https://prosemirror.net/docs/ref/#state.EditorState.storedMarks) instead of a range of the\ndocument.\n*/\n\n\nfunction toggleMark(markType) {\n  let attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return function (state, dispatch) {\n    let {\n      empty,\n      $cursor,\n      ranges\n    } = state.selection;\n    if (empty && !$cursor || !markApplies(state.doc, ranges, markType)) return false;\n\n    if (dispatch) {\n      if ($cursor) {\n        if (markType.isInSet(state.storedMarks || $cursor.marks())) dispatch(state.tr.removeStoredMark(markType));else dispatch(state.tr.addStoredMark(markType.create(attrs)));\n      } else {\n        let has = false,\n            tr = state.tr;\n\n        for (let i = 0; !has && i < ranges.length; i++) {\n          let {\n            $from,\n            $to\n          } = ranges[i];\n          has = state.doc.rangeHasMark($from.pos, $to.pos, markType);\n        }\n\n        for (let i = 0; i < ranges.length; i++) {\n          let {\n            $from,\n            $to\n          } = ranges[i];\n\n          if (has) {\n            tr.removeMark($from.pos, $to.pos, markType);\n          } else {\n            let from = $from.pos,\n                to = $to.pos,\n                start = $from.nodeAfter,\n                end = $to.nodeBefore;\n            let spaceStart = start && start.isText ? /^\\s*/.exec(start.text)[0].length : 0;\n            let spaceEnd = end && end.isText ? /\\s*$/.exec(end.text)[0].length : 0;\n\n            if (from + spaceStart < to) {\n              from += spaceStart;\n              to -= spaceEnd;\n            }\n\n            tr.addMark(from, to, markType.create(attrs));\n          }\n        }\n\n        dispatch(tr.scrollIntoView());\n      }\n    }\n\n    return true;\n  };\n}\n\nfunction wrapDispatchForJoin(dispatch, isJoinable) {\n  return tr => {\n    if (!tr.isGeneric) return dispatch(tr);\n    let ranges = [];\n\n    for (let i = 0; i < tr.mapping.maps.length; i++) {\n      let map = tr.mapping.maps[i];\n\n      for (let j = 0; j < ranges.length; j++) ranges[j] = map.map(ranges[j]);\n\n      map.forEach((_s, _e, from, to) => ranges.push(from, to));\n    } // Figure out which joinable points exist inside those ranges,\n    // by checking all node boundaries in their parent nodes.\n\n\n    let joinable = [];\n\n    for (let i = 0; i < ranges.length; i += 2) {\n      let from = ranges[i],\n          to = ranges[i + 1];\n      let $from = tr.doc.resolve(from),\n          depth = $from.sharedDepth(to),\n          parent = $from.node(depth);\n\n      for (let index = $from.indexAfter(depth), pos = $from.after(depth + 1); pos <= to; ++index) {\n        let after = parent.maybeChild(index);\n        if (!after) break;\n\n        if (index && joinable.indexOf(pos) == -1) {\n          let before = parent.child(index - 1);\n          if (before.type == after.type && isJoinable(before, after)) joinable.push(pos);\n        }\n\n        pos += after.nodeSize;\n      }\n    } // Join the joinable points\n\n\n    joinable.sort((a, b) => a - b);\n\n    for (let i = joinable.length - 1; i >= 0; i--) {\n      if (canJoin(tr.doc, joinable[i])) tr.join(joinable[i]);\n    }\n\n    dispatch(tr);\n  };\n}\n/**\nWrap a command so that, when it produces a transform that causes\ntwo joinable nodes to end up next to each other, those are joined.\nNodes are considered joinable when they are of the same type and\nwhen the `isJoinable` predicate returns true for them or, if an\narray of strings was passed, if their node type name is in that\narray.\n*/\n\n\nfunction autoJoin(command, isJoinable) {\n  let canJoin = Array.isArray(isJoinable) ? node => isJoinable.indexOf(node.type.name) > -1 : isJoinable;\n  return (state, dispatch, view) => command(state, dispatch && wrapDispatchForJoin(dispatch, canJoin), view);\n}\n/**\nCombine a number of command functions into a single function (which\ncalls them one by one until one returns true).\n*/\n\n\nfunction chainCommands() {\n  for (var _len = arguments.length, commands = new Array(_len), _key = 0; _key < _len; _key++) {\n    commands[_key] = arguments[_key];\n  }\n\n  return function (state, dispatch, view) {\n    for (let i = 0; i < commands.length; i++) if (commands[i](state, dispatch, view)) return true;\n\n    return false;\n  };\n}\n\nlet backspace = chainCommands(deleteSelection, joinBackward, selectNodeBackward);\nlet del = chainCommands(deleteSelection, joinForward, selectNodeForward);\n/**\nA basic keymap containing bindings not specific to any schema.\nBinds the following keys (when multiple commands are listed, they\nare chained with [`chainCommands`](https://prosemirror.net/docs/ref/#commands.chainCommands)):\n\n* **Enter** to `newlineInCode`, `createParagraphNear`, `liftEmptyBlock`, `splitBlock`\n* **Mod-Enter** to `exitCode`\n* **Backspace** and **Mod-Backspace** to `deleteSelection`, `joinBackward`, `selectNodeBackward`\n* **Delete** and **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`\n* **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`\n* **Mod-a** to `selectAll`\n*/\n\nconst pcBaseKeymap = {\n  \"Enter\": chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlock),\n  \"Mod-Enter\": exitCode,\n  \"Backspace\": backspace,\n  \"Mod-Backspace\": backspace,\n  \"Shift-Backspace\": backspace,\n  \"Delete\": del,\n  \"Mod-Delete\": del,\n  \"Mod-a\": selectAll\n};\n/**\nA copy of `pcBaseKeymap` that also binds **Ctrl-h** like Backspace,\n**Ctrl-d** like Delete, **Alt-Backspace** like Ctrl-Backspace, and\n**Ctrl-Alt-Backspace**, **Alt-Delete**, and **Alt-d** like\nCtrl-Delete.\n*/\n\nconst macBaseKeymap = {\n  \"Ctrl-h\": pcBaseKeymap[\"Backspace\"],\n  \"Alt-Backspace\": pcBaseKeymap[\"Mod-Backspace\"],\n  \"Ctrl-d\": pcBaseKeymap[\"Delete\"],\n  \"Ctrl-Alt-Backspace\": pcBaseKeymap[\"Mod-Delete\"],\n  \"Alt-Delete\": pcBaseKeymap[\"Mod-Delete\"],\n  \"Alt-d\": pcBaseKeymap[\"Mod-Delete\"],\n  \"Ctrl-a\": selectTextblockStart,\n  \"Ctrl-e\": selectTextblockEnd\n};\n\nfor (let key in pcBaseKeymap) macBaseKeymap[key] = pcBaseKeymap[key];\n\nconst mac = typeof navigator != \"undefined\" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) // @ts-ignore\n: typeof os != \"undefined\" && os.platform ? os.platform() == \"darwin\" : false;\n/**\nDepending on the detected platform, this will hold\n[`pcBasekeymap`](https://prosemirror.net/docs/ref/#commands.pcBaseKeymap) or\n[`macBaseKeymap`](https://prosemirror.net/docs/ref/#commands.macBaseKeymap).\n*/\n\nconst baseKeymap = mac ? macBaseKeymap : pcBaseKeymap;\nexport { autoJoin, baseKeymap, chainCommands, createParagraphNear, deleteSelection, exitCode, joinBackward, joinDown, joinForward, joinUp, lift, liftEmptyBlock, macBaseKeymap, newlineInCode, pcBaseKeymap, selectAll, selectNodeBackward, selectNodeForward, selectParentNode, selectTextblockEnd, selectTextblockStart, setBlockType, splitBlock, splitBlockKeepMarks, toggleMark, wrapIn };","map":{"version":3,"names":["liftTarget","replaceStep","canJoin","joinPoint","canSplit","ReplaceAroundStep","findWrapping","Slice","Fragment","NodeSelection","Selection","AllSelection","TextSelection","deleteSelection","state","dispatch","selection","empty","tr","scrollIntoView","joinBackward","view","$cursor","endOfTextblock","parentOffset","$cut","findCutBefore","range","blockRange","target","lift","before","nodeBefore","type","spec","isolating","deleteBarrier","parent","content","size","textblockAt","isSelectable","delStep","doc","after","slice","to","from","step","setSelection","findFrom","resolve","mapping","map","pos","create","nodeSize","isAtom","depth","delete","node","side","only","scan","firstChild","lastChild","isTextblock","childCount","selectNodeBackward","$head","$pos","i","index","joinForward","findCutAfter","nodeAfter","selectNodeForward","joinUp","sel","nodeSel","point","join","joinDown","$from","$to","newlineInCode","$anchor","code","sameParent","insertText","defaultBlockAt","match","edgeCount","edge","hasRequiredAttrs","exitCode","above","indexAfter","contentMatchAt","canReplaceWith","replaceWith","createAndFill","near","createParagraphNear","inlineContent","insert","liftEmptyBlock","end","split","splitBlock","isBlock","atEnd","deflt","types","undefined","can","first","$first","setNodeMarkup","splitBlockKeepMarks","marks","storedMarks","ensureMarks","selectParentNode","same","sharedDepth","selectAll","joinMaybeClear","compatibleContent","canReplace","clearIncompatible","conn","canDelAfter","matchType","validEnd","wrap","length","copy","joinAt","selAfter","at","push","afterText","afterDepth","selectTextblockSide","isInline","start","selectTextblockStart","selectTextblockEnd","wrapIn","nodeType","attrs","wrapping","setBlockType","applicable","nodesBetween","hasMarkup","markApplies","ranges","allowsMarkType","toggleMark","markType","isInSet","removeStoredMark","addStoredMark","has","rangeHasMark","removeMark","spaceStart","isText","exec","text","spaceEnd","addMark","wrapDispatchForJoin","isJoinable","isGeneric","maps","j","forEach","_s","_e","joinable","maybeChild","indexOf","child","sort","a","b","autoJoin","command","Array","isArray","name","chainCommands","commands","backspace","del","pcBaseKeymap","macBaseKeymap","key","mac","navigator","test","platform","os","baseKeymap"],"sources":["/Users/sunny/Desktop/Sunnyjin/22tgthon/frontend/node_modules/prosemirror-commands/dist/index.js"],"sourcesContent":["import { liftTarget, replaceStep, canJoin, joinPoint, canSplit, ReplaceAroundStep, findWrapping } from 'prosemirror-transform';\nimport { Slice, Fragment } from 'prosemirror-model';\nimport { NodeSelection, Selection, AllSelection, TextSelection } from 'prosemirror-state';\n\n/**\nDelete the selection, if there is one.\n*/\nconst deleteSelection = (state, dispatch) => {\n    if (state.selection.empty)\n        return false;\n    if (dispatch)\n        dispatch(state.tr.deleteSelection().scrollIntoView());\n    return true;\n};\n/**\nIf the selection is empty and at the start of a textblock, try to\nreduce the distance between that block and the one before itâ€”if\nthere's a block directly before it that can be joined, join them.\nIf not, try to move the selected block closer to the next one in\nthe document structure by lifting it out of its parent or moving it\ninto a parent of the previous block. Will use the view for accurate\n(bidi-aware) start-of-textblock detection if given.\n*/\nconst joinBackward = (state, dispatch, view) => {\n    let { $cursor } = state.selection;\n    if (!$cursor || (view ? !view.endOfTextblock(\"backward\", state)\n        : $cursor.parentOffset > 0))\n        return false;\n    let $cut = findCutBefore($cursor);\n    // If there is no node before this, try to lift\n    if (!$cut) {\n        let range = $cursor.blockRange(), target = range && liftTarget(range);\n        if (target == null)\n            return false;\n        if (dispatch)\n            dispatch(state.tr.lift(range, target).scrollIntoView());\n        return true;\n    }\n    let before = $cut.nodeBefore;\n    // Apply the joining algorithm\n    if (!before.type.spec.isolating && deleteBarrier(state, $cut, dispatch))\n        return true;\n    // If the node below has no content and the node above is\n    // selectable, delete the node below and select the one above.\n    if ($cursor.parent.content.size == 0 &&\n        (textblockAt(before, \"end\") || NodeSelection.isSelectable(before))) {\n        let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);\n        if (delStep && delStep.slice.size < delStep.to - delStep.from) {\n            if (dispatch) {\n                let tr = state.tr.step(delStep);\n                tr.setSelection(textblockAt(before, \"end\") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos, -1)), -1)\n                    : NodeSelection.create(tr.doc, $cut.pos - before.nodeSize));\n                dispatch(tr.scrollIntoView());\n            }\n            return true;\n        }\n    }\n    // If the node before is an atom, delete it\n    if (before.isAtom && $cut.depth == $cursor.depth - 1) {\n        if (dispatch)\n            dispatch(state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView());\n        return true;\n    }\n    return false;\n};\nfunction textblockAt(node, side, only = false) {\n    for (let scan = node; scan; scan = (side == \"start\" ? scan.firstChild : scan.lastChild)) {\n        if (scan.isTextblock)\n            return true;\n        if (only && scan.childCount != 1)\n            return false;\n    }\n    return false;\n}\n/**\nWhen the selection is empty and at the start of a textblock, select\nthe node before that textblock, if possible. This is intended to be\nbound to keys like backspace, after\n[`joinBackward`](https://prosemirror.net/docs/ref/#commands.joinBackward) or other deleting\ncommands, as a fall-back behavior when the schema doesn't allow\ndeletion at the selected point.\n*/\nconst selectNodeBackward = (state, dispatch, view) => {\n    let { $head, empty } = state.selection, $cut = $head;\n    if (!empty)\n        return false;\n    if ($head.parent.isTextblock) {\n        if (view ? !view.endOfTextblock(\"backward\", state) : $head.parentOffset > 0)\n            return false;\n        $cut = findCutBefore($head);\n    }\n    let node = $cut && $cut.nodeBefore;\n    if (!node || !NodeSelection.isSelectable(node))\n        return false;\n    if (dispatch)\n        dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos - node.nodeSize)).scrollIntoView());\n    return true;\n};\nfunction findCutBefore($pos) {\n    if (!$pos.parent.type.spec.isolating)\n        for (let i = $pos.depth - 1; i >= 0; i--) {\n            if ($pos.index(i) > 0)\n                return $pos.doc.resolve($pos.before(i + 1));\n            if ($pos.node(i).type.spec.isolating)\n                break;\n        }\n    return null;\n}\n/**\nIf the selection is empty and the cursor is at the end of a\ntextblock, try to reduce or remove the boundary between that block\nand the one after it, either by joining them or by moving the other\nblock closer to this one in the tree structure. Will use the view\nfor accurate start-of-textblock detection if given.\n*/\nconst joinForward = (state, dispatch, view) => {\n    let { $cursor } = state.selection;\n    if (!$cursor || (view ? !view.endOfTextblock(\"forward\", state)\n        : $cursor.parentOffset < $cursor.parent.content.size))\n        return false;\n    let $cut = findCutAfter($cursor);\n    // If there is no node after this, there's nothing to do\n    if (!$cut)\n        return false;\n    let after = $cut.nodeAfter;\n    // Try the joining algorithm\n    if (deleteBarrier(state, $cut, dispatch))\n        return true;\n    // If the node above has no content and the node below is\n    // selectable, delete the node above and select the one below.\n    if ($cursor.parent.content.size == 0 &&\n        (textblockAt(after, \"start\") || NodeSelection.isSelectable(after))) {\n        let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);\n        if (delStep && delStep.slice.size < delStep.to - delStep.from) {\n            if (dispatch) {\n                let tr = state.tr.step(delStep);\n                tr.setSelection(textblockAt(after, \"start\") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos)), 1)\n                    : NodeSelection.create(tr.doc, tr.mapping.map($cut.pos)));\n                dispatch(tr.scrollIntoView());\n            }\n            return true;\n        }\n    }\n    // If the next node is an atom, delete it\n    if (after.isAtom && $cut.depth == $cursor.depth - 1) {\n        if (dispatch)\n            dispatch(state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView());\n        return true;\n    }\n    return false;\n};\n/**\nWhen the selection is empty and at the end of a textblock, select\nthe node coming after that textblock, if possible. This is intended\nto be bound to keys like delete, after\n[`joinForward`](https://prosemirror.net/docs/ref/#commands.joinForward) and similar deleting\ncommands, to provide a fall-back behavior when the schema doesn't\nallow deletion at the selected point.\n*/\nconst selectNodeForward = (state, dispatch, view) => {\n    let { $head, empty } = state.selection, $cut = $head;\n    if (!empty)\n        return false;\n    if ($head.parent.isTextblock) {\n        if (view ? !view.endOfTextblock(\"forward\", state) : $head.parentOffset < $head.parent.content.size)\n            return false;\n        $cut = findCutAfter($head);\n    }\n    let node = $cut && $cut.nodeAfter;\n    if (!node || !NodeSelection.isSelectable(node))\n        return false;\n    if (dispatch)\n        dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos)).scrollIntoView());\n    return true;\n};\nfunction findCutAfter($pos) {\n    if (!$pos.parent.type.spec.isolating)\n        for (let i = $pos.depth - 1; i >= 0; i--) {\n            let parent = $pos.node(i);\n            if ($pos.index(i) + 1 < parent.childCount)\n                return $pos.doc.resolve($pos.after(i + 1));\n            if (parent.type.spec.isolating)\n                break;\n        }\n    return null;\n}\n/**\nJoin the selected block or, if there is a text selection, the\nclosest ancestor block of the selection that can be joined, with\nthe sibling above it.\n*/\nconst joinUp = (state, dispatch) => {\n    let sel = state.selection, nodeSel = sel instanceof NodeSelection, point;\n    if (nodeSel) {\n        if (sel.node.isTextblock || !canJoin(state.doc, sel.from))\n            return false;\n        point = sel.from;\n    }\n    else {\n        point = joinPoint(state.doc, sel.from, -1);\n        if (point == null)\n            return false;\n    }\n    if (dispatch) {\n        let tr = state.tr.join(point);\n        if (nodeSel)\n            tr.setSelection(NodeSelection.create(tr.doc, point - state.doc.resolve(point).nodeBefore.nodeSize));\n        dispatch(tr.scrollIntoView());\n    }\n    return true;\n};\n/**\nJoin the selected block, or the closest ancestor of the selection\nthat can be joined, with the sibling after it.\n*/\nconst joinDown = (state, dispatch) => {\n    let sel = state.selection, point;\n    if (sel instanceof NodeSelection) {\n        if (sel.node.isTextblock || !canJoin(state.doc, sel.to))\n            return false;\n        point = sel.to;\n    }\n    else {\n        point = joinPoint(state.doc, sel.to, 1);\n        if (point == null)\n            return false;\n    }\n    if (dispatch)\n        dispatch(state.tr.join(point).scrollIntoView());\n    return true;\n};\n/**\nLift the selected block, or the closest ancestor block of the\nselection that can be lifted, out of its parent node.\n*/\nconst lift = (state, dispatch) => {\n    let { $from, $to } = state.selection;\n    let range = $from.blockRange($to), target = range && liftTarget(range);\n    if (target == null)\n        return false;\n    if (dispatch)\n        dispatch(state.tr.lift(range, target).scrollIntoView());\n    return true;\n};\n/**\nIf the selection is in a node whose type has a truthy\n[`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) property in its spec, replace the\nselection with a newline character.\n*/\nconst newlineInCode = (state, dispatch) => {\n    let { $head, $anchor } = state.selection;\n    if (!$head.parent.type.spec.code || !$head.sameParent($anchor))\n        return false;\n    if (dispatch)\n        dispatch(state.tr.insertText(\"\\n\").scrollIntoView());\n    return true;\n};\nfunction defaultBlockAt(match) {\n    for (let i = 0; i < match.edgeCount; i++) {\n        let { type } = match.edge(i);\n        if (type.isTextblock && !type.hasRequiredAttrs())\n            return type;\n    }\n    return null;\n}\n/**\nWhen the selection is in a node with a truthy\n[`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) property in its spec, create a\ndefault block after the code block, and move the cursor there.\n*/\nconst exitCode = (state, dispatch) => {\n    let { $head, $anchor } = state.selection;\n    if (!$head.parent.type.spec.code || !$head.sameParent($anchor))\n        return false;\n    let above = $head.node(-1), after = $head.indexAfter(-1), type = defaultBlockAt(above.contentMatchAt(after));\n    if (!type || !above.canReplaceWith(after, after, type))\n        return false;\n    if (dispatch) {\n        let pos = $head.after(), tr = state.tr.replaceWith(pos, pos, type.createAndFill());\n        tr.setSelection(Selection.near(tr.doc.resolve(pos), 1));\n        dispatch(tr.scrollIntoView());\n    }\n    return true;\n};\n/**\nIf a block node is selected, create an empty paragraph before (if\nit is its parent's first child) or after it.\n*/\nconst createParagraphNear = (state, dispatch) => {\n    let sel = state.selection, { $from, $to } = sel;\n    if (sel instanceof AllSelection || $from.parent.inlineContent || $to.parent.inlineContent)\n        return false;\n    let type = defaultBlockAt($to.parent.contentMatchAt($to.indexAfter()));\n    if (!type || !type.isTextblock)\n        return false;\n    if (dispatch) {\n        let side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos;\n        let tr = state.tr.insert(side, type.createAndFill());\n        tr.setSelection(TextSelection.create(tr.doc, side + 1));\n        dispatch(tr.scrollIntoView());\n    }\n    return true;\n};\n/**\nIf the cursor is in an empty textblock that can be lifted, lift the\nblock.\n*/\nconst liftEmptyBlock = (state, dispatch) => {\n    let { $cursor } = state.selection;\n    if (!$cursor || $cursor.parent.content.size)\n        return false;\n    if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {\n        let before = $cursor.before();\n        if (canSplit(state.doc, before)) {\n            if (dispatch)\n                dispatch(state.tr.split(before).scrollIntoView());\n            return true;\n        }\n    }\n    let range = $cursor.blockRange(), target = range && liftTarget(range);\n    if (target == null)\n        return false;\n    if (dispatch)\n        dispatch(state.tr.lift(range, target).scrollIntoView());\n    return true;\n};\n/**\nSplit the parent block of the selection. If the selection is a text\nselection, also delete its content.\n*/\nconst splitBlock = (state, dispatch) => {\n    let { $from, $to } = state.selection;\n    if (state.selection instanceof NodeSelection && state.selection.node.isBlock) {\n        if (!$from.parentOffset || !canSplit(state.doc, $from.pos))\n            return false;\n        if (dispatch)\n            dispatch(state.tr.split($from.pos).scrollIntoView());\n        return true;\n    }\n    if (!$from.parent.isBlock)\n        return false;\n    if (dispatch) {\n        let atEnd = $to.parentOffset == $to.parent.content.size;\n        let tr = state.tr;\n        if (state.selection instanceof TextSelection || state.selection instanceof AllSelection)\n            tr.deleteSelection();\n        let deflt = $from.depth == 0 ? null : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));\n        let types = atEnd && deflt ? [{ type: deflt }] : undefined;\n        let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types);\n        if (!types && !can && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : undefined)) {\n            if (deflt)\n                types = [{ type: deflt }];\n            can = true;\n        }\n        if (can) {\n            tr.split(tr.mapping.map($from.pos), 1, types);\n            if (!atEnd && !$from.parentOffset && $from.parent.type != deflt) {\n                let first = tr.mapping.map($from.before()), $first = tr.doc.resolve(first);\n                if (deflt && $from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt))\n                    tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);\n            }\n        }\n        dispatch(tr.scrollIntoView());\n    }\n    return true;\n};\n/**\nActs like [`splitBlock`](https://prosemirror.net/docs/ref/#commands.splitBlock), but without\nresetting the set of active marks at the cursor.\n*/\nconst splitBlockKeepMarks = (state, dispatch) => {\n    return splitBlock(state, dispatch && (tr => {\n        let marks = state.storedMarks || (state.selection.$to.parentOffset && state.selection.$from.marks());\n        if (marks)\n            tr.ensureMarks(marks);\n        dispatch(tr);\n    }));\n};\n/**\nMove the selection to the node wrapping the current selection, if\nany. (Will not select the document node.)\n*/\nconst selectParentNode = (state, dispatch) => {\n    let { $from, to } = state.selection, pos;\n    let same = $from.sharedDepth(to);\n    if (same == 0)\n        return false;\n    pos = $from.before(same);\n    if (dispatch)\n        dispatch(state.tr.setSelection(NodeSelection.create(state.doc, pos)));\n    return true;\n};\n/**\nSelect the whole document.\n*/\nconst selectAll = (state, dispatch) => {\n    if (dispatch)\n        dispatch(state.tr.setSelection(new AllSelection(state.doc)));\n    return true;\n};\nfunction joinMaybeClear(state, $pos, dispatch) {\n    let before = $pos.nodeBefore, after = $pos.nodeAfter, index = $pos.index();\n    if (!before || !after || !before.type.compatibleContent(after.type))\n        return false;\n    if (!before.content.size && $pos.parent.canReplace(index - 1, index)) {\n        if (dispatch)\n            dispatch(state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView());\n        return true;\n    }\n    if (!$pos.parent.canReplace(index, index + 1) || !(after.isTextblock || canJoin(state.doc, $pos.pos)))\n        return false;\n    if (dispatch)\n        dispatch(state.tr\n            .clearIncompatible($pos.pos, before.type, before.contentMatchAt(before.childCount))\n            .join($pos.pos)\n            .scrollIntoView());\n    return true;\n}\nfunction deleteBarrier(state, $cut, dispatch) {\n    let before = $cut.nodeBefore, after = $cut.nodeAfter, conn, match;\n    if (before.type.spec.isolating || after.type.spec.isolating)\n        return false;\n    if (joinMaybeClear(state, $cut, dispatch))\n        return true;\n    let canDelAfter = $cut.parent.canReplace($cut.index(), $cut.index() + 1);\n    if (canDelAfter &&\n        (conn = (match = before.contentMatchAt(before.childCount)).findWrapping(after.type)) &&\n        match.matchType(conn[0] || after.type).validEnd) {\n        if (dispatch) {\n            let end = $cut.pos + after.nodeSize, wrap = Fragment.empty;\n            for (let i = conn.length - 1; i >= 0; i--)\n                wrap = Fragment.from(conn[i].create(null, wrap));\n            wrap = Fragment.from(before.copy(wrap));\n            let tr = state.tr.step(new ReplaceAroundStep($cut.pos - 1, end, $cut.pos, end, new Slice(wrap, 1, 0), conn.length, true));\n            let joinAt = end + 2 * conn.length;\n            if (canJoin(tr.doc, joinAt))\n                tr.join(joinAt);\n            dispatch(tr.scrollIntoView());\n        }\n        return true;\n    }\n    let selAfter = Selection.findFrom($cut, 1);\n    let range = selAfter && selAfter.$from.blockRange(selAfter.$to), target = range && liftTarget(range);\n    if (target != null && target >= $cut.depth) {\n        if (dispatch)\n            dispatch(state.tr.lift(range, target).scrollIntoView());\n        return true;\n    }\n    if (canDelAfter && textblockAt(after, \"start\", true) && textblockAt(before, \"end\")) {\n        let at = before, wrap = [];\n        for (;;) {\n            wrap.push(at);\n            if (at.isTextblock)\n                break;\n            at = at.lastChild;\n        }\n        let afterText = after, afterDepth = 1;\n        for (; !afterText.isTextblock; afterText = afterText.firstChild)\n            afterDepth++;\n        if (at.canReplace(at.childCount, at.childCount, afterText.content)) {\n            if (dispatch) {\n                let end = Fragment.empty;\n                for (let i = wrap.length - 1; i >= 0; i--)\n                    end = Fragment.from(wrap[i].copy(end));\n                let tr = state.tr.step(new ReplaceAroundStep($cut.pos - wrap.length, $cut.pos + after.nodeSize, $cut.pos + afterDepth, $cut.pos + after.nodeSize - afterDepth, new Slice(end, wrap.length, 0), 0, true));\n                dispatch(tr.scrollIntoView());\n            }\n            return true;\n        }\n    }\n    return false;\n}\nfunction selectTextblockSide(side) {\n    return function (state, dispatch) {\n        let sel = state.selection, $pos = side < 0 ? sel.$from : sel.$to;\n        let depth = $pos.depth;\n        while ($pos.node(depth).isInline) {\n            if (!depth)\n                return false;\n            depth--;\n        }\n        if (!$pos.node(depth).isTextblock)\n            return false;\n        if (dispatch)\n            dispatch(state.tr.setSelection(TextSelection.create(state.doc, side < 0 ? $pos.start(depth) : $pos.end(depth))));\n        return true;\n    };\n}\n/**\nMoves the cursor to the start of current text block.\n*/\nconst selectTextblockStart = selectTextblockSide(-1);\n/**\nMoves the cursor to the end of current text block.\n*/\nconst selectTextblockEnd = selectTextblockSide(1);\n// Parameterized commands\n/**\nWrap the selection in a node of the given type with the given\nattributes.\n*/\nfunction wrapIn(nodeType, attrs = null) {\n    return function (state, dispatch) {\n        let { $from, $to } = state.selection;\n        let range = $from.blockRange($to), wrapping = range && findWrapping(range, nodeType, attrs);\n        if (!wrapping)\n            return false;\n        if (dispatch)\n            dispatch(state.tr.wrap(range, wrapping).scrollIntoView());\n        return true;\n    };\n}\n/**\nReturns a command that tries to set the selected textblocks to the\ngiven node type with the given attributes.\n*/\nfunction setBlockType(nodeType, attrs = null) {\n    return function (state, dispatch) {\n        let { from, to } = state.selection;\n        let applicable = false;\n        state.doc.nodesBetween(from, to, (node, pos) => {\n            if (applicable)\n                return false;\n            if (!node.isTextblock || node.hasMarkup(nodeType, attrs))\n                return;\n            if (node.type == nodeType) {\n                applicable = true;\n            }\n            else {\n                let $pos = state.doc.resolve(pos), index = $pos.index();\n                applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType);\n            }\n        });\n        if (!applicable)\n            return false;\n        if (dispatch)\n            dispatch(state.tr.setBlockType(from, to, nodeType, attrs).scrollIntoView());\n        return true;\n    };\n}\nfunction markApplies(doc, ranges, type) {\n    for (let i = 0; i < ranges.length; i++) {\n        let { $from, $to } = ranges[i];\n        let can = $from.depth == 0 ? doc.type.allowsMarkType(type) : false;\n        doc.nodesBetween($from.pos, $to.pos, node => {\n            if (can)\n                return false;\n            can = node.inlineContent && node.type.allowsMarkType(type);\n        });\n        if (can)\n            return true;\n    }\n    return false;\n}\n/**\nCreate a command function that toggles the given mark with the\ngiven attributes. Will return `false` when the current selection\ndoesn't support that mark. This will remove the mark if any marks\nof that type exist in the selection, or add it otherwise. If the\nselection is empty, this applies to the [stored\nmarks](https://prosemirror.net/docs/ref/#state.EditorState.storedMarks) instead of a range of the\ndocument.\n*/\nfunction toggleMark(markType, attrs = null) {\n    return function (state, dispatch) {\n        let { empty, $cursor, ranges } = state.selection;\n        if ((empty && !$cursor) || !markApplies(state.doc, ranges, markType))\n            return false;\n        if (dispatch) {\n            if ($cursor) {\n                if (markType.isInSet(state.storedMarks || $cursor.marks()))\n                    dispatch(state.tr.removeStoredMark(markType));\n                else\n                    dispatch(state.tr.addStoredMark(markType.create(attrs)));\n            }\n            else {\n                let has = false, tr = state.tr;\n                for (let i = 0; !has && i < ranges.length; i++) {\n                    let { $from, $to } = ranges[i];\n                    has = state.doc.rangeHasMark($from.pos, $to.pos, markType);\n                }\n                for (let i = 0; i < ranges.length; i++) {\n                    let { $from, $to } = ranges[i];\n                    if (has) {\n                        tr.removeMark($from.pos, $to.pos, markType);\n                    }\n                    else {\n                        let from = $from.pos, to = $to.pos, start = $from.nodeAfter, end = $to.nodeBefore;\n                        let spaceStart = start && start.isText ? /^\\s*/.exec(start.text)[0].length : 0;\n                        let spaceEnd = end && end.isText ? /\\s*$/.exec(end.text)[0].length : 0;\n                        if (from + spaceStart < to) {\n                            from += spaceStart;\n                            to -= spaceEnd;\n                        }\n                        tr.addMark(from, to, markType.create(attrs));\n                    }\n                }\n                dispatch(tr.scrollIntoView());\n            }\n        }\n        return true;\n    };\n}\nfunction wrapDispatchForJoin(dispatch, isJoinable) {\n    return (tr) => {\n        if (!tr.isGeneric)\n            return dispatch(tr);\n        let ranges = [];\n        for (let i = 0; i < tr.mapping.maps.length; i++) {\n            let map = tr.mapping.maps[i];\n            for (let j = 0; j < ranges.length; j++)\n                ranges[j] = map.map(ranges[j]);\n            map.forEach((_s, _e, from, to) => ranges.push(from, to));\n        }\n        // Figure out which joinable points exist inside those ranges,\n        // by checking all node boundaries in their parent nodes.\n        let joinable = [];\n        for (let i = 0; i < ranges.length; i += 2) {\n            let from = ranges[i], to = ranges[i + 1];\n            let $from = tr.doc.resolve(from), depth = $from.sharedDepth(to), parent = $from.node(depth);\n            for (let index = $from.indexAfter(depth), pos = $from.after(depth + 1); pos <= to; ++index) {\n                let after = parent.maybeChild(index);\n                if (!after)\n                    break;\n                if (index && joinable.indexOf(pos) == -1) {\n                    let before = parent.child(index - 1);\n                    if (before.type == after.type && isJoinable(before, after))\n                        joinable.push(pos);\n                }\n                pos += after.nodeSize;\n            }\n        }\n        // Join the joinable points\n        joinable.sort((a, b) => a - b);\n        for (let i = joinable.length - 1; i >= 0; i--) {\n            if (canJoin(tr.doc, joinable[i]))\n                tr.join(joinable[i]);\n        }\n        dispatch(tr);\n    };\n}\n/**\nWrap a command so that, when it produces a transform that causes\ntwo joinable nodes to end up next to each other, those are joined.\nNodes are considered joinable when they are of the same type and\nwhen the `isJoinable` predicate returns true for them or, if an\narray of strings was passed, if their node type name is in that\narray.\n*/\nfunction autoJoin(command, isJoinable) {\n    let canJoin = Array.isArray(isJoinable) ? (node) => isJoinable.indexOf(node.type.name) > -1\n        : isJoinable;\n    return (state, dispatch, view) => command(state, dispatch && wrapDispatchForJoin(dispatch, canJoin), view);\n}\n/**\nCombine a number of command functions into a single function (which\ncalls them one by one until one returns true).\n*/\nfunction chainCommands(...commands) {\n    return function (state, dispatch, view) {\n        for (let i = 0; i < commands.length; i++)\n            if (commands[i](state, dispatch, view))\n                return true;\n        return false;\n    };\n}\nlet backspace = chainCommands(deleteSelection, joinBackward, selectNodeBackward);\nlet del = chainCommands(deleteSelection, joinForward, selectNodeForward);\n/**\nA basic keymap containing bindings not specific to any schema.\nBinds the following keys (when multiple commands are listed, they\nare chained with [`chainCommands`](https://prosemirror.net/docs/ref/#commands.chainCommands)):\n\n* **Enter** to `newlineInCode`, `createParagraphNear`, `liftEmptyBlock`, `splitBlock`\n* **Mod-Enter** to `exitCode`\n* **Backspace** and **Mod-Backspace** to `deleteSelection`, `joinBackward`, `selectNodeBackward`\n* **Delete** and **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`\n* **Mod-Delete** to `deleteSelection`, `joinForward`, `selectNodeForward`\n* **Mod-a** to `selectAll`\n*/\nconst pcBaseKeymap = {\n    \"Enter\": chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlock),\n    \"Mod-Enter\": exitCode,\n    \"Backspace\": backspace,\n    \"Mod-Backspace\": backspace,\n    \"Shift-Backspace\": backspace,\n    \"Delete\": del,\n    \"Mod-Delete\": del,\n    \"Mod-a\": selectAll\n};\n/**\nA copy of `pcBaseKeymap` that also binds **Ctrl-h** like Backspace,\n**Ctrl-d** like Delete, **Alt-Backspace** like Ctrl-Backspace, and\n**Ctrl-Alt-Backspace**, **Alt-Delete**, and **Alt-d** like\nCtrl-Delete.\n*/\nconst macBaseKeymap = {\n    \"Ctrl-h\": pcBaseKeymap[\"Backspace\"],\n    \"Alt-Backspace\": pcBaseKeymap[\"Mod-Backspace\"],\n    \"Ctrl-d\": pcBaseKeymap[\"Delete\"],\n    \"Ctrl-Alt-Backspace\": pcBaseKeymap[\"Mod-Delete\"],\n    \"Alt-Delete\": pcBaseKeymap[\"Mod-Delete\"],\n    \"Alt-d\": pcBaseKeymap[\"Mod-Delete\"],\n    \"Ctrl-a\": selectTextblockStart,\n    \"Ctrl-e\": selectTextblockEnd\n};\nfor (let key in pcBaseKeymap)\n    macBaseKeymap[key] = pcBaseKeymap[key];\nconst mac = typeof navigator != \"undefined\" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform)\n    // @ts-ignore\n    : typeof os != \"undefined\" && os.platform ? os.platform() == \"darwin\" : false;\n/**\nDepending on the detected platform, this will hold\n[`pcBasekeymap`](https://prosemirror.net/docs/ref/#commands.pcBaseKeymap) or\n[`macBaseKeymap`](https://prosemirror.net/docs/ref/#commands.macBaseKeymap).\n*/\nconst baseKeymap = mac ? macBaseKeymap : pcBaseKeymap;\n\nexport { autoJoin, baseKeymap, chainCommands, createParagraphNear, deleteSelection, exitCode, joinBackward, joinDown, joinForward, joinUp, lift, liftEmptyBlock, macBaseKeymap, newlineInCode, pcBaseKeymap, selectAll, selectNodeBackward, selectNodeForward, selectParentNode, selectTextblockEnd, selectTextblockStart, setBlockType, splitBlock, splitBlockKeepMarks, toggleMark, wrapIn };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}